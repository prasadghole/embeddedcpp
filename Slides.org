#+Title: Embedded C++ 
# +Author: Prasad Ghole
#+Email: prasad.ghole@ltts.com
#+REVEAL_THEME: night
#+OPTIONS: toc:nil num:nil timestamp:nil 
* Introduction to C++
* Devlopment tools


 | Vendor | C++ Standard |
 |--------+--------------|
 | Keil   | C++11        |
 | ARM    | C++14        |
 | IAR    | C++14        |
 | GCC    | C++17        |
* Evaluation Boards
** Nucleo-F767ZI
   [[./images/nucleo-f767.png]]
** Features
  1. 3 User LED
  2. On board ST Link extension board for easy debugging
  3. Mass storage
  4. Virtual COM port
  5. Flexible power supply options
  6. Ethrnet RJ45
** Nucleo-F303RE
   [[./images/nucleo-f303.png]]
** Features
  1. 1 User LED
  2. On board ST Link extension board for easy debugging
  3. Mass storage
  4. Virtual COM port
  5. Flexible power supply options
* Debug Tools
** OpenOCD and STM GDB server
[[http://openocd.org/doc/html/index.html]]

OpenOCD is a Open On-Chip debugger that provides programming,debugging  boudry-scan
testing for embedded device. It acts as a server and acceptss incoming
connection from GDB via port 3333 or telnet port 4444.
*** Setup
[[./images/debugserver.png]]

* Installing GCC cross compiler
1. Go to the https://developer.arm.com 
2. Click on Tools and software >> Open source Software >> GNU toolchain
#+REVEAL: split
3. Downlaod ARM GNU embedded toolchain as per your host platform (only 32 bit toolchains are available now)
https://developer.arm.com/tools-and-software/open-source-software/developer-tools/gnu-toolchain/gnu-rm/downloads

* Verify installation
  
#+BEGIN_SRC shell :exports code :eval yes

arm-none-eabi-g++ --version
 
#+END_SRC
* Build Process
* STM32F103 board
** Evaluation firmware
https://my.st.com/content/my_st_com/en/products/embedded-software/mcu-mpu-embedded-software/stm32-embedded-software/stm32cube-mcu-mpu-packages/stm32cubef4.license=1562567706435.product=STM32CubeF4.version=1.24.0.html
https://my.st.com/content/my_st_com/en/products/embedded-software/mcu-mpu-embedded-software/stm32-embedded-software/stm32cube-mcu-mpu-packages/stm32cubef7.html#resource

* stlink 
** WARNING
Please make sure not to connect both external 5 volts power supply and USB power supply at same time.
** ST link usb drive
Download usb driver from 
https://my.st.com/content/my_st_com/en/products/development-tools/software-development-tools/stm32-software-development-tools/stm32-utilities/stsw-link009.license=1564137466456.product=STSW-LINK009.version=2.0.1.html
 Run stlink_winusb_install batch file to install driver.
** ST link utilities
Download st link utility from 
https://my.st.com/content/my_st_com/en/products/development-tools/software-development-tools/stm32-software-development-tools/stm32-programmers/stsw-link004.html

* Hello World
** Write Program
** Compliling
** Linking
** Loading firmware to target
*** Converting to binary
ELf file consists of additional header informatio. but to load binary on target flash we need to strip down this 
additional information. 
#+BEGIN_SRC shell

arm-none-eabi-objcopy -I elf -O binary firmware.elf firmware.bin
 
#+END_SRC
*** Programming Controller

#+BEGIN_SRC bash
st-link_cli -C SWD -P firmware.bin 0x8000000 -V "after_programming"

#+END_SRC
Linker scripts describes the
** Debug
*** Start GDB server
*** load elf
*** Debug
* C++ 14 
C++ standard evolved more rapidly after release of 2011
* Use namespece
Explain how we can use namespace to simplify naming of common static functions.
#+SRC_BEGIN C++

#+SRC_END

* Strongly typed
** enum class
* Function Inline
  Macros can be replaced with strongly typed
* Type Conversions
** dynamic_cast
** reinterpret_cast
** static_cast
** const_cast
* static asserts 
This will help in compile time catching of errors.
* Mixing C and C++  libraries 
* Templates
* std::Array
* std::tuple
* Referances
** Gnu C 
*** Predefined macros
https://gcc.gnu.org/onlinedocs/cpp/Common-Predefined-Macros.html
** Keil library
*** run time library support 
http://www.keil.com/support/man/docs/armlib/armlib_chr1358938908603.htm

C++ libraries need C libraries for target specific support.
